# üìà Plot the variogram
plot(temp_vgm, main = "Variogram for Temperature",col='blue',pch=16)
###############################################################################################################
###############################################################################################################
# ‚òîÔ∏è Fit a spatio-temporal model for Precipitation
gam_precip <- gam(Precipitation ~ s(Year) + s(Longitude_sc, Latitude_sc,k=7) +
ti(Longitude_sc, Latitude_sc, Year),
data = final_data,
family = quasipoisson)
# üå°Ô∏è Fit a spatio-temporal model for Maximum Temperature
gam_temp <- gam(Max_Temperature ~ s(Year) + s(Longitude_sc, Latitude_sc,k=7) +
ti(Longitude_sc, Latitude_sc, Year),
data = final_data,
family = gaussian)
# üìù Print the summaries to get the results
summary(gam_precip)
summary(gam_temp)
###########################################################################################################
###########################################################################################################
# üó∫Ô∏è Predict precipitation and temperature values across the spatial grid
grid_points$precip_pred <- predict(gam_precip_spatial, newdata = as.data.frame(grid_points), type = "response")
# üì¶ Install and load necessary packages
library(readxl)
library(tidyverse)
library(spacetime)
library(sp)
library(gstat)
library(mgcv)
# üìÇ Combine all Excel files into a single data frame
file_paths <- list.files(path = "C:\\Users\\AdonsMB\\OneDrive - University of the Free State\\Desktop\\Masters\\MASTERS 2025\\2025\\Data\\Complete Imputed Data", pattern = "*.xlsx", full.names = TRUE)
# This new loop will handle the monthly data structure
all_data <- map_dfr(file_paths, function(path) {
station_name <- tools::file_path_sans_ext(basename(path))
# Read the Precipitation sheet and clean month names
precip_data <- read_excel(path, sheet = "Precipitation") %>%
pivot_longer(
cols = -Year,
names_to = "Month_Name",
values_to = "Precipitation"
) %>%
mutate(Station = station_name)
# Read the Maximum Temperature sheet and clean month names
temp_data <- read_excel(path, sheet = "Maximum") %>%
pivot_longer(
cols = -Year,
names_to = "Month_Name",
values_to = "Max_Temperature"
) %>%
mutate(Station = station_name)
# Join precipitation and temperature data by Year, Month_Name, and Station
full_data <- left_join(precip_data, temp_data, by = c("Year", "Month_Name", "Station"))
# Add month number, making the matching more robust
full_data <- full_data %>%
mutate(Month = match(
tolower(str_trim(Month_Name)), # Make month names lowercase and remove whitespace
tolower(month.abb)            # Match against lowercase abbreviations
))
return(full_data)
})
# üîó Merge with coordinates and format data
stations_info <- read_excel("C:\\Users\\AdonsMB\\OneDrive - University of the Free State\\Desktop\\Masters\\MASTERS 2025\\2025\\FS Coordinates.xlsx")
final_data <- all_data %>%
left_join(stations_info, by = "Station") %>%
mutate(
# Scale coordinates to improve model stability
Latitude_sc = as.numeric(scale(Latitude)),
Longitude_sc = as.numeric(scale(Longitude))
) %>%
select(-Month_Name) # Remove the month name column
# Display a sample of the final data frame
head(final_data)
#write_xlsx(final_data, "C:\\Users\\AdonsMB\\OneDrive - University of the Free State\\Desktop\\Masters\\MASTERS 2025\\2025\\F.xlsx")
#############################################################################################################
#############################################################################################################
# üåç Convert your data frame to a spatial points data frame
coordinates(final_data) <- ~Longitude + Latitude
# üîé Create a variogram for Precipitation
precip_vgm <- variogram(Precipitation ~ 1, data = final_data)
# üìà Plot the variogram
plot(precip_vgm, main = "Variogram for Precipitation",col='blue',pch=16)
# üîé Create a variogram for Temperature
temp_vgm <- variogram(`Max_Temperature` ~ 1, data = final_data)
# üìà Plot the variogram
plot(temp_vgm, main = "Variogram for Temperature",col='blue',pch=16)
###############################################################################################################
###############################################################################################################
# ‚òîÔ∏è Fit a spatio-temporal model for Precipitation
gam_precip <- gam(Precipitation ~ s(Year) + s(Longitude_sc, Latitude_sc,k=7) +
ti(Longitude_sc, Latitude_sc, Year),
data = final_data,
family = quasipoisson)
# üå°Ô∏è Fit a spatio-temporal model for Maximum Temperature
gam_temp <- gam(Max_Temperature ~ s(Year) + s(Longitude_sc, Latitude_sc,k=7) +
ti(Longitude_sc, Latitude_sc, Year),
data = final_data,
family = gaussian)
# üìù Print the summaries to get the results
summary(gam_precip)
summary(gam_temp)
gam_precip_spatial = gam_precip
gam_temp_spatial = gam_temp
###########################################################################################################
###########################################################################################################
# üó∫Ô∏è Predict precipitation and temperature values across the spatial grid
grid_points$precip_pred <- predict(gam_precip_spatial, newdata = as.data.frame(grid_points), type = "response")
# üì¶ Install and load necessary packages
library(readxl)
library(tidyverse)
library(spacetime)
library(sp)
library(gstat)
library(mgcv)
# üìÇ Combine all Excel files into a single data frame
file_paths <- list.files(path = "C:\\Users\\AdonsMB\\OneDrive - University of the Free State\\Desktop\\Masters\\MASTERS 2025\\2025\\Data\\Complete Imputed Data", pattern = "*.xlsx", full.names = TRUE)
# This new loop will handle the monthly data structure
all_data <- map_dfr(file_paths, function(path) {
station_name <- tools::file_path_sans_ext(basename(path))
# Read the Precipitation sheet and clean month names
precip_data <- read_excel(path, sheet = "Precipitation") %>%
pivot_longer(
cols = -Year,
names_to = "Month_Name",
values_to = "Precipitation"
) %>%
mutate(Station = station_name)
# Read the Maximum Temperature sheet and clean month names
temp_data <- read_excel(path, sheet = "Maximum") %>%
pivot_longer(
cols = -Year,
names_to = "Month_Name",
values_to = "Max_Temperature"
) %>%
mutate(Station = station_name)
# Join precipitation and temperature data by Year, Month_Name, and Station
full_data <- left_join(precip_data, temp_data, by = c("Year", "Month_Name", "Station"))
# Add month number, making the matching more robust
full_data <- full_data %>%
mutate(Month = match(
tolower(str_trim(Month_Name)), # Make month names lowercase and remove whitespace
tolower(month.abb)            # Match against lowercase abbreviations
))
return(full_data)
})
# üîó Merge with coordinates and format data
stations_info <- read_excel("C:\\Users\\AdonsMB\\OneDrive - University of the Free State\\Desktop\\Masters\\MASTERS 2025\\2025\\FS Coordinates.xlsx")
final_data <- all_data %>%
left_join(stations_info, by = "Station") %>%
mutate(
# Scale coordinates to improve model stability
Latitude_sc = as.numeric(scale(Latitude)),
Longitude_sc = as.numeric(scale(Longitude))
) %>%
select(-Month_Name) # Remove the month name column
# Display a sample of the final data frame
head(final_data)
#write_xlsx(final_data, "C:\\Users\\AdonsMB\\OneDrive - University of the Free State\\Desktop\\Masters\\MASTERS 2025\\2025\\F.xlsx")
#############################################################################################################
#############################################################################################################
# üåç Convert your data frame to a spatial points data frame
coordinates(final_data) <- ~Longitude + Latitude
# üîé Create a variogram for Precipitation
precip_vgm <- variogram(Precipitation ~ 1, data = final_data)
# üìà Plot the variogram
plot(precip_vgm, main = "Variogram for Precipitation",col='blue',pch=16)
# üîé Create a variogram for Temperature
temp_vgm <- variogram(`Max_Temperature` ~ 1, data = final_data)
# üìà Plot the variogram
plot(temp_vgm, main = "Variogram for Temperature",col='blue',pch=16)
###############################################################################################################
###############################################################################################################
# ‚òîÔ∏è Fit a spatio-temporal model for Precipitation
gam_precip <- gam(Precipitation ~ s(Year) + s(Longitude_sc, Latitude_sc,k=7) +
ti(Longitude_sc, Latitude_sc, Year),
data = final_data,
family = quasipoisson)
# üå°Ô∏è Fit a spatio-temporal model for Maximum Temperature
gam_temp <- gam(Max_Temperature ~ s(Year) + s(Longitude_sc, Latitude_sc,k=7) +
ti(Longitude_sc, Latitude_sc, Year),
data = final_data,
family = gaussian)
# üìù Print the summaries to get the results
summary(gam_precip)
summary(gam_temp)
gam_precip_spatial = gam_precip
gam_temp_spatial = gam_temp
###########################################################################################################
###########################################################################################################
# üåê Create a spatial grid for prediction
# Get the spatial extent (bounding box) of your data
grid_extent <- expand.grid(
Longitude = seq(min(final_data$Longitude), max(final_data$Longitude), length.out = 100),
Latitude = seq(min(final_data$Latitude), max(final_data$Latitude), length.out = 100)
)
# Convert the grid to a spatial points data frame
coordinates(grid_extent) <- ~Longitude + Latitude
# Now, create the 'grid_points' object
grid_points <- as.data.frame(grid_extent)
# Scale the coordinates for the grid to match the model's training data
# It's essential to use the same scaling as the original data
grid_points$Longitude_sc <- as.numeric(scale(grid_points$Longitude,
center = attr(final_data$Longitude_sc, "scaled:center"),
scale = attr(final_data$Longitude_sc, "scaled:scale")))
# üì¶ Install and load necessary packages
library(readxl)
library(tidyverse)
library(spacetime)
library(sp)
library(gstat)
library(mgcv)
# üìÇ Combine all Excel files into a single data frame
file_paths <- list.files(path = "C:\\Users\\AdonsMB\\OneDrive - University of the Free State\\Desktop\\Masters\\MASTERS 2025\\2025\\Data\\Complete Imputed Data", pattern = "*.xlsx", full.names = TRUE)
# This new loop will handle the monthly data structure
all_data <- map_dfr(file_paths, function(path) {
station_name <- tools::file_path_sans_ext(basename(path))
# Read the Precipitation sheet and clean month names
precip_data <- read_excel(path, sheet = "Precipitation") %>%
pivot_longer(
cols = -Year,
names_to = "Month_Name",
values_to = "Precipitation"
) %>%
mutate(Station = station_name)
# Read the Maximum Temperature sheet and clean month names
temp_data <- read_excel(path, sheet = "Maximum") %>%
pivot_longer(
cols = -Year,
names_to = "Month_Name",
values_to = "Max_Temperature"
) %>%
mutate(Station = station_name)
# Join precipitation and temperature data by Year, Month_Name, and Station
full_data <- left_join(precip_data, temp_data, by = c("Year", "Month_Name", "Station"))
# Add month number, making the matching more robust
full_data <- full_data %>%
mutate(Month = match(
tolower(str_trim(Month_Name)), # Make month names lowercase and remove whitespace
tolower(month.abb)            # Match against lowercase abbreviations
))
return(full_data)
})
# üîó Merge with coordinates and format data
stations_info <- read_excel("C:\\Users\\AdonsMB\\OneDrive - University of the Free State\\Desktop\\Masters\\MASTERS 2025\\2025\\FS Coordinates.xlsx")
final_data <- all_data %>%
left_join(stations_info, by = "Station") %>%
mutate(
# Scale coordinates to improve model stability
Latitude_sc = as.numeric(scale(Latitude)),
Longitude_sc = as.numeric(scale(Longitude))
) %>%
select(-Month_Name) # Remove the month name column
# Display a sample of the final data frame
head(final_data)
#write_xlsx(final_data, "C:\\Users\\AdonsMB\\OneDrive - University of the Free State\\Desktop\\Masters\\MASTERS 2025\\2025\\F.xlsx")
#############################################################################################################
#############################################################################################################
# üåç Convert your data frame to a spatial points data frame
coordinates(final_data) <- ~Longitude + Latitude
# üîé Create a variogram for Precipitation
precip_vgm <- variogram(Precipitation ~ 1, data = final_data)
# üìà Plot the variogram
plot(precip_vgm, main = "Variogram for Precipitation",col='blue',pch=16)
# üîé Create a variogram for Temperature
temp_vgm <- variogram(`Max_Temperature` ~ 1, data = final_data)
# üìà Plot the variogram
plot(temp_vgm, main = "Variogram for Temperature",col='blue',pch=16)
###############################################################################################################
###############################################################################################################
# ‚òîÔ∏è Fit a spatio-temporal model for Precipitation
gam_precip <- gam(Precipitation ~ s(Year) + s(Longitude_sc, Latitude_sc,k=7) +
ti(Longitude_sc, Latitude_sc, Year),
data = final_data,
family = quasipoisson)
# üå°Ô∏è Fit a spatio-temporal model for Maximum Temperature
gam_temp <- gam(Max_Temperature ~ s(Year) + s(Longitude_sc, Latitude_sc,k=7) +
ti(Longitude_sc, Latitude_sc, Year),
data = final_data,
family = gaussian)
# üìù Print the summaries to get the results
summary(gam_precip)
summary(gam_temp)
gam_precip_spatial = gam_precip
gam_temp_spatial = gam_temp
###########################################################################################################
###########################################################################################################
# üåê Create a spatial grid for prediction
# Get the spatial extent (bounding box) of your data
grid_extent <- expand.grid(
Longitude = seq(min(final_data$Longitude), max(final_data$Longitude), length.out = 100),
Latitude = seq(min(final_data$Latitude), max(final_data$Latitude), length.out = 100)
)
# Convert the grid to a spatial points data frame
coordinates(grid_extent) <- ~Longitude + Latitude
# Now, create the 'grid_points' object
grid_points <- as.data.frame(grid_extent)
# Get the scaling parameters from the original data
# These are the mean (center) and standard deviation (scale)
lon_center <- attr(final_data$Longitude_sc, "scaled:center")
lon_scale <- attr(final_data$Longitude_sc, "scaled:scale")
lat_center <- attr(final_data$Latitude_sc, "scaled:center")
lat_scale <- attr(final_data$Latitude_sc, "scaled:scale")
# Manually scale the new grid coordinates using these parameters
grid_points$Longitude_sc <- (grid_points$Longitude - lon_center) / lon_scale
# üì¶ Install and load necessary packages
library(readxl)
library(tidyverse)
library(spacetime)
library(sp)
library(gstat)
library(mgcv)
# üìÇ Combine all Excel files into a single data frame
file_paths <- list.files(path = "C:\\Users\\AdonsMB\\OneDrive - University of the Free State\\Desktop\\Masters\\MASTERS 2025\\2025\\Data\\Complete Imputed Data", pattern = "*.xlsx", full.names = TRUE)
# This new loop will handle the monthly data structure
all_data <- map_dfr(file_paths, function(path) {
station_name <- tools::file_path_sans_ext(basename(path))
# Read the Precipitation sheet and clean month names
precip_data <- read_excel(path, sheet = "Precipitation") %>%
pivot_longer(
cols = -Year,
names_to = "Month_Name",
values_to = "Precipitation"
) %>%
mutate(Station = station_name)
# Read the Maximum Temperature sheet and clean month names
temp_data <- read_excel(path, sheet = "Maximum") %>%
pivot_longer(
cols = -Year,
names_to = "Month_Name",
values_to = "Max_Temperature"
) %>%
mutate(Station = station_name)
# Join precipitation and temperature data by Year, Month_Name, and Station
full_data <- left_join(precip_data, temp_data, by = c("Year", "Month_Name", "Station"))
# Add month number, making the matching more robust
full_data <- full_data %>%
mutate(Month = match(
tolower(str_trim(Month_Name)), # Make month names lowercase and remove whitespace
tolower(month.abb)            # Match against lowercase abbreviations
))
return(full_data)
})
# üîó Merge with coordinates and format data
stations_info <- read_excel("C:\\Users\\AdonsMB\\OneDrive - University of the Free State\\Desktop\\Masters\\MASTERS 2025\\2025\\FS Coordinates.xlsx")
# --- START OF MODIFIED CODE ---
# Create a temporary data frame with scaled coordinates
tmp_data <- all_data %>%
left_join(stations_info, by = "Station") %>%
mutate(
# Scale coordinates to improve model stability
Latitude_sc = as.numeric(scale(Latitude)),
Longitude_sc = as.numeric(scale(Longitude))
) %>%
select(-Month_Name) # Remove the month name column
# Get the scaling parameters from the temporary data frame
# These are the mean (center) and standard deviation (scale)
lon_center <- attr(tmp_data$Longitude_sc, "scaled:center")
lon_scale <- attr(tmp_data$Longitude_sc, "scaled:scale")
lat_center <- attr(tmp_data$Latitude_sc, "scaled:center")
lat_scale <- attr(tmp_data$Latitude_sc, "scaled:scale")
# Store the final_data object for plotting and model fitting
# This is where we create the final data frame to work with
final_data <- tmp_data
# Display a sample of the final data frame
head(final_data)
# üåç Convert your data frame to a spatial points data frame
coordinates(final_data) <- ~Longitude + Latitude
# --- END OF MODIFIED CODE ---
#############################################################################################################
#############################################################################################################
# üîé Create a variogram for Precipitation
precip_vgm <- variogram(Precipitation ~ 1, data = final_data)
# üìà Plot the variogram
plot(precip_vgm, main = "Variogram for Precipitation",col='blue',pch=16)
# üîé Create a variogram for Temperature
temp_vgm <- variogram(`Max_Temperature` ~ 1, data = final_data)
# üìà Plot the variogram
plot(temp_vgm, main = "Variogram for Temperature",col='blue',pch=16)
###############################################################################################################
###############################################################################################################
# ‚òîÔ∏è Fit a spatio-temporal model for Precipitation
gam_precip <- gam(Precipitation ~ s(Year) + s(Longitude_sc, Latitude_sc,k=7) +
ti(Longitude_sc, Latitude_sc, Year),
data = final_data,
family = quasipoisson)
# üå°Ô∏è Fit a spatio-temporal model for Maximum Temperature
gam_temp <- gam(Max_Temperature ~ s(Year) + s(Longitude_sc, Latitude_sc,k=7) +
ti(Longitude_sc, Latitude_sc, Year),
data = final_data,
family = gaussian)
# üìù Print the summaries to get the results
summary(gam_precip)
summary(gam_temp)
gam_precip_spatial = gam_precip
gam_temp_spatial = gam_temp
###########################################################################################################
###########################################################################################################
# üåê Create a spatial grid for prediction
# Get the spatial extent (bounding box) of your data
grid_extent <- expand.grid(
Longitude = seq(min(final_data$Longitude), max(final_data$Longitude), length.out = 100),
Latitude = seq(min(final_data$Latitude), max(final_data$Latitude), length.out = 100)
)
# Convert the grid to a spatial points data frame
coordinates(grid_extent) <- ~Longitude + Latitude
# Now, create the 'grid_points' object
grid_points <- as.data.frame(grid_extent)
# Manually scale the new grid coordinates using the stored parameters
grid_points$Longitude_sc <- (grid_points$Longitude - lon_center) / lon_scale
# üì¶ Install and load necessary packages
library(readxl)
library(tidyverse)
library(spacetime)
library(sp)
library(gstat)
library(mgcv)
# üìÇ Combine all Excel files into a single data frame
file_paths <- list.files(path = "C:\\Users\\AdonsMB\\OneDrive - University of the Free State\\Desktop\\Masters\\MASTERS 2025\\2025\\Data\\Complete Imputed Data", pattern = "*.xlsx", full.names = TRUE)
# This new loop will handle the monthly data structure
all_data <- map_dfr(file_paths, function(path) {
station_name <- tools::file_path_sans_ext(basename(path))
# Read the Precipitation sheet and clean month names
precip_data <- read_excel(path, sheet = "Precipitation") %>%
pivot_longer(
cols = -Year,
names_to = "Month_Name",
values_to = "Precipitation"
) %>%
mutate(Station = station_name)
# Read the Maximum Temperature sheet and clean month names
temp_data <- read_excel(path, sheet = "Maximum") %>%
pivot_longer(
cols = -Year,
names_to = "Month_Name",
values_to = "Max_Temperature"
) %>%
mutate(Station = station_name)
# Join precipitation and temperature data by Year, Month_Name, and Station
full_data <- left_join(precip_data, temp_data, by = c("Year", "Month_Name", "Station"))
# Add month number, making the matching more robust
full_data <- full_data %>%
mutate(Month = match(
tolower(str_trim(Month_Name)), # Make month names lowercase and remove whitespace
tolower(month.abb)            # Match against lowercase abbreviations
))
return(full_data)
})
# üîó Merge with coordinates and format data
stations_info <- read_excel("C:\\Users\\AdonsMB\\OneDrive - University of the Free State\\Desktop\\Masters\\MASTERS 2025\\2025\\FS Coordinates.xlsx")
# --- START OF MODIFIED CODE ---
# Create a temporary data frame with scaled coordinates
tmp_data <- all_data %>%
left_join(stations_info, by = "Station") %>%
mutate(
# Scale coordinates to improve model stability
Latitude_sc = as.numeric(scale(Latitude)),
Longitude_sc = as.numeric(scale(Longitude))
) %>%
select(-Month_Name) # Remove the month name column
# Get the scaling parameters from the temporary data frame
# These are the mean (center) and standard deviation (scale)
lon_center <- attr(tmp_data$Longitude_sc, "scaled:center")
lon_scale <- attr(tmp_data$Longitude_sc, "scaled:scale")
lat_center <- attr(tmp_data$Latitude_sc, "scaled:center")
lat_scale <- attr(tmp_data$Latitude_sc, "scaled:scale")
# Store the final_data object for plotting and model fitting
# This is where we create the final data frame to work with
final_data <- tmp_data
# Display a sample of the final data frame
head(final_data)
# üåç Convert your data frame to a spatial points data frame
coordinates(final_data) <- ~Longitude + Latitude
# --- END OF MODIFIED CODE ---
#############################################################################################################
#############################################################################################################
# üîé Create a variogram for Precipitation
precip_vgm <- variogram(Precipitation ~ 1, data = final_data)
# üìà Plot the variogram
plot(precip_vgm, main = "Variogram for Precipitation",col='blue',pch=16)
# üîé Create a variogram for Temperature
temp_vgm <- variogram(`Max_Temperature` ~ 1, data = final_data)
# üìà Plot the variogram
plot(temp_vgm, main = "Variogram for Temperature",col='blue',pch=16)
###############################################################################################################
###############################################################################################################
# ‚òîÔ∏è Fit a spatio-temporal model for Precipitation
gam_precip <- gam(Precipitation ~ s(Year) + s(Longitude_sc, Latitude_sc,k=7) +
ti(Longitude_sc, Latitude_sc, Year),
data = final_data,
family = quasipoisson)
# üå°Ô∏è Fit a spatio-temporal model for Maximum Temperature
gam_temp <- gam(Max_Temperature ~ s(Year) + s(Longitude_sc, Latitude_sc,k=7) +
ti(Longitude_sc, Latitude_sc, Year),
data = final_data,
family = gaussian)
# üìù Print the summaries to get the results
summary(gam_precip)
summary(gam_temp)
gam_precip_spatial = gam_precip
gam_temp_spatial = gam_temp
###########################################################################################################
###########################################################################################################
# üåê Create a spatial grid for prediction
# Get the spatial extent (bounding box) of your data
grid_extent <- expand.grid(
Longitude = seq(min(final_data$Longitude), max(final_data$Longitude), length.out = 100),
Latitude = seq(min(final_data$Latitude), max(final_data$Latitude), length.out = 100)
)
# Convert the grid to a spatial points data frame
coordinates(grid_extent) <- ~Longitude + Latitude
# Now, create the 'grid_points' object
grid_points <- as.data.frame(grid_extent)
# Manually scale the new grid coordinates using the stored parameters
grid_points$Longitude_sc <- (grid_points$Longitude - lon_center) / lon_scale
